
Q2/ What is a ThreadPool, how to create a thread pool of 4 threads, and write down the
   difference between the Callable and Runnable interface.

Ans:

	Thread Pool:
	-----------
	
	  -> A thread pool reuses previously created threads to execute current tasks and offers a 
		solution to the problem of thread cycle overhead and resource thrashing. Since the thread is 
		already existing when the request arrives, the delay introduced by thread creation is eliminated, 
		making the application more responsive.


	Some points:
	- - - - - -
	 * Java provides the Executor framework which is centered around the Executor interface, its 
	  sub-interface â€“ExecutorService and the class-ThreadPoolExecutor, which implements both of these interfaces.
	  By using the executor, one only has to implement the Runnable objects and send them to the executor to
	  execute.
	  
     * They allow you to take advantage of threading, but focus on the tasks that you want the thread to
      perform, instead of thread mechanics.
      
	 * To use thread pools, we first create a object of ExecutorService and pass a set of tasks to it. 
	 ThreadPoolExecutor class allows to set the core and maximum pool size.The runnables that are run by 
	 a particular thread are executed sequentially.

	 Executor Thread Pool Methods:
	    Method                               Description
	   --------					            -------------	
	newFixedThreadPool(int)           Creates a fixed size thread pool.
	
	newCachedThreadPool()             Creates a thread pool that creates new 
	                                  threads as needed, but will reuse previously 
	                                  constructed threads when they are available
	                                  
	newSingleThreadExecutor()         Creates a single thread. 
	 
	 
	 Example:
	 --------
	class PrintJob implements Runnable{
		String name;
		PrintJob(Sting name){
		this.name=name;
		}
		public void run(){
		System.out.println(name +" job started by Thread :"+Thread.currentThread().getName());
		try{
		Thread.sleep(5000);
		}catch(InturreptedException e){
		e.printStackTrace();
		}
		System.out.println(name +"..job completed by Thread :"+Thread.currentThread().getName());
		}
		}
		class Main{
		public static void main(String[] args){
		PrintJob[] jobs={
		new PrintJob("Ram"),
		new PrintJob("Ravi"),
		new PrintJob("Anil"),
		new PrintJob("Shiva"),
		new PrintJob("Pawan"),
		new PrintJob("Suresh")
		};
		ExecutorService service = Executors.newFixedThreadPool(4);
		for(PrintJob job:jobs){
		service.submit(job);
		}
		service.shutdown();//to shutdown the executorService.
		}
		}

	 
	 
	 Difference Between Runnable and Callable:
	 ----------------------------------------
             Runnable                                             Callable
            - - - - - -                                           - - - - - -
   - If a thread won't returns anything.                 If a Thread returns anything
	
   - only one method public void run()                   only one method public Object call() throws Exception
	
   - return type void                                    return type is Object
	
   - if any exception raise compulsory we need to        not required to use try-catch
	handle within try catch.
	
   - Belongs to java.lang package                        Belongs to java.util.concurrent package
	
   - from java 1.0 version                               from java 1.5 version
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 